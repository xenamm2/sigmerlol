
-- hi why u here
local G2L = {};


G2L["1"] = Instance.new("ScreenGui", game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui"));
G2L["1"]["IgnoreGuiInset"] = true;
G2L["1"]["ScreenInsets"] = Enum.ScreenInsets.DeviceSafeInsets;
G2L["1"]["Name"] = [[denoloadingscrn]];
G2L["1"]["ZIndexBehavior"] = Enum.ZIndexBehavior.Sibling;



G2L["2"] = Instance.new("Frame", G2L["1"]);
G2L["2"]["BorderSizePixel"] = 0;
G2L["2"]["BackgroundColor3"] = Color3.fromRGB(13, 13, 13);
G2L["2"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["2"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);



G2L["3"] = Instance.new("Frame", G2L["2"]);
G2L["3"]["BorderSizePixel"] = 0;
G2L["3"]["BackgroundColor3"] = Color3.fromRGB(27, 27, 27);
G2L["3"]["Size"] = UDim2.new(0.2247, 0, 0.45072, 0);
G2L["3"]["Position"] = UDim2.new(0.38765, 0, 0.27464, 0);
G2L["3"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["3"]["BackgroundTransparency"] = 0.9;



G2L["4"] = Instance.new("UICorner", G2L["3"]);
G2L["4"]["CornerRadius"] = UDim.new(0, 11);



G2L["5"] = Instance.new("UIStroke", G2L["3"]);
G2L["5"]["Thickness"] = 1.9;
G2L["5"]["Color"] = Color3.fromRGB(25, 25, 25);



G2L["6"] = Instance.new("ImageLabel", G2L["3"]);
G2L["6"]["BorderSizePixel"] = 0;
G2L["6"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);

G2L["6"]["Image"] = [[rbxassetid://11351620343]];
G2L["6"]["Size"] = UDim2.new(0.28329, 0, 0.2457, 0);
G2L["6"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["6"]["BackgroundTransparency"] = 1;
G2L["6"]["Position"] = UDim2.new(0.35644, 0, 0.0172, 0);



G2L["7"] = Instance.new("TextLabel", G2L["3"]);
G2L["7"]["TextWrapped"] = true;
G2L["7"]["BorderSizePixel"] = 0;
G2L["7"]["TextSize"] = 14;
G2L["7"]["TextScaled"] = true;
G2L["7"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["7"]["FontFace"] = Font.new([[rbxassetid://12187365364]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["7"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["7"]["BackgroundTransparency"] = 1;
G2L["7"]["Size"] = UDim2.new(0.56657, 0, 0.12285, 0);
G2L["7"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["7"]["Text"] = [[Welcome]];
G2L["7"]["Position"] = UDim2.new(0.2153, 0, 0.24816, 0);



G2L["8"] = Instance.new("UIGradient", G2L["7"]);
G2L["8"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(255, 166, 210))};



G2L["9"] = Instance.new("TextLabel", G2L["3"]);
G2L["9"]["TextWrapped"] = true;
G2L["9"]["BorderSizePixel"] = 0;
G2L["9"]["TextSize"] = 14;
G2L["9"]["TextScaled"] = true;
G2L["9"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["9"]["FontFace"] = Font.new([[rbxassetid://12187365364]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["9"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["9"]["BackgroundTransparency"] = 1;
G2L["9"]["Size"] = UDim2.new(0.56657, 0, 0.12285, 0);
G2L["9"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["9"]["Text"] = [[Status]];
G2L["9"]["Name"] = [[status]];
G2L["9"]["Position"] = UDim2.new(0.2153, 0, 0.65356, 0);



G2L["a"] = Instance.new("UIGradient", G2L["9"]);
G2L["a"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(255, 166, 210))};



G2L["b"] = Instance.new("TextLabel", G2L["3"]);
G2L["b"]["TextWrapped"] = true;
G2L["b"]["BorderSizePixel"] = 0;
G2L["b"]["TextSize"] = 14;
G2L["b"]["TextScaled"] = true;
G2L["b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["b"]["FontFace"] = Font.new([[rbxassetid://12187365364]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["b"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["b"]["BackgroundTransparency"] = 1;
G2L["b"]["Size"] = UDim2.new(0.36261, 0, 0.07862, 0);
G2L["b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["b"]["Text"] = [[0/941]];
G2L["b"]["Name"] = [[status]];
G2L["b"]["Position"] = UDim2.new(0.31728, 0, 0.80344, 0);



G2L["c"] = Instance.new("LocalScript", G2L["b"]);




G2L["d"] = Instance.new("UIGradient", G2L["b"]);
G2L["d"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(255, 166, 210))};



G2L["e"] = Instance.new("Frame", G2L["3"]);
G2L["e"]["BorderSizePixel"] = 0;
G2L["e"]["BackgroundColor3"] = Color3.fromRGB(27, 27, 27);
G2L["e"]["Size"] = UDim2.new(1, 0, 0.16573, 0);
G2L["e"]["Position"] = UDim2.new(0, 0, 0.41535, 0);
G2L["e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["e"]["Name"] = [[gunlabel]];
G2L["e"]["BackgroundTransparency"] = 0.9;



G2L["f"] = Instance.new("UIStroke", G2L["e"]);
G2L["f"]["Thickness"] = 1.9;
G2L["f"]["Color"] = Color3.fromRGB(25, 25, 25);



G2L["10"] = Instance.new("TextLabel", G2L["e"]);
G2L["10"]["TextWrapped"] = true;
G2L["10"]["BorderSizePixel"] = 0;
G2L["10"]["TextSize"] = 14;
G2L["10"]["TextScaled"] = true;
G2L["10"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["10"]["FontFace"] = Font.new([[rbxassetid://12187365364]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["10"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["10"]["BackgroundTransparency"] = 1;
G2L["10"]["Size"] = UDim2.new(0.56818, 0, 0.88952, 0);
G2L["10"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["10"]["Text"] = [[guns.lol/deno_d9]];
G2L["10"]["Position"] = UDim2.new(0.31728, 0, 0.04201, 0);



G2L["11"] = Instance.new("UIGradient", G2L["10"]);
G2L["11"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 171, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(255, 0, 128))};



G2L["12"] = Instance.new("ImageLabel", G2L["e"]);
G2L["12"]["BorderSizePixel"] = 0;
G2L["12"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);

G2L["12"]["Image"] = [[rbxassetid://131579916612575]];
G2L["12"]["Size"] = UDim2.new(0.16193, 0, 0.84505, 0);
G2L["12"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["12"]["BackgroundTransparency"] = 1;
G2L["12"]["Position"] = UDim2.new(0.15814, 0, 0.07088, 0);



local function C_c()
	local script = G2L["c"];


	local StarterGui = game:GetService("StarterGui")
	local Players = game:GetService("Players")
	local player = Players.LocalPlayer
	local character = player.Character or player.CharacterAdded:Wait()
	local humanoid = character:WaitForChild("Humanoid")
	local RunService = game:GetService("RunService")


	StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.All, false)


	local controlConnection
	local camera = workspace.CurrentCamera
	local originalCameraType = camera.CameraType


	camera.CameraType = Enum.CameraType.Scriptable


	humanoid.PlatformStand = true


	local UserInputService = game:GetService("UserInputService")
	local function blockInput(input, gameProcessed)
		return true 
	end
	UserInputService.InputBegan:Connect(blockInput)
	UserInputService.InputChanged:Connect(blockInput)
	UserInputService.InputEnded:Connect(blockInput)

	local label = script.Parent
	local goal = 941
	local duration = 240 
	local updateInterval = 0.25 
	local statusLabel = script.Parent.Parent:FindFirstChild("status")

	local messages = {
		"Initializing",
		"Updating script",
		"Loading assets",
		"Clearing cache",
		"Optimizing performance",
		"Preparing environment",
		"Fetching data",
		"Connecting to server",
		"Downloading resources",
		"Installing dependencies",
		"Checking file integrity",
		"Decrypting packages",
		"Compiling shaders",
		"Indexing assets",
		"Cleaning temporary files",
		"Verifying installation",
		"Allocating memory",
		"Applying patches",
		"Registering modules",
		"Syncing data",
		"Resolving conflicts",
		"Finalizing setup",
		"Running diagnostics",
		"Configuring settings",
		"Calibrating systems",
		"Scanning environment",
		"Building cache",
		"Compressing files",
		"Validating request",
		"Uploading telemetry",
		"Securing connection",
		"Authorizing user",
		"Preparing workspace",
		"Analyzing logs",
		"Generating keys",
		"Encrypting data",
		"Bootstrapping",
		"Stabilizing framework",
		"Mounting drives",
		"Final cleanup",
		"Activating components",
		"Synchronizing cloud data",
		"Establishing secure tunnel",
		"Cleaning registry",
		"Unpacking archives",
		"Resolving DNS",
		"Applying configuration",
		"Downloading updates",
		"Rebuilding database",
		"Reindexing content",
		"Preloading textures",
		"Compiling code",
		"Starting services",
		"Flushing old data",
		"Checking compatibility",
		"Allocating resources",
		"Verifying checksums",
		"Reloading scripts",
		"Refreshing cache",
		"Scanning assets",
		"Preparing UI",
		"Testing connection",
		"Decrypting session",
		"Balancing load",
		"Reconnecting",
		"Checking licenses",
		"Activating modules",
		"Resetting pipeline",
		"Final adjustments",
		"Loading fonts",
		"Generating configs",
		"Staging resources",
		"Registering events",
		"Cleaning up memory",
		"Mapping environment",
		"Compiling libraries",
		"Checking disk space",
		"Gathering statistics",
		"Resolving dependencies",
		"Hydrating cache",
		"Applying encryption",
		"Transmitting data",
		"Unlocking features",
		"Finalizing process"
	}

	local function countUp()
		local startTime = tick()
		local messageIndex = 1
		local messageChangeInterval = duration / #messages

		while true do
			local elapsed = tick() - startTime
			local progress = math.clamp(elapsed / duration, 0, 1)
			local current = math.floor(progress * goal)

			label.Text = current .. "/" .. goal

			if statusLabel then
				messageIndex = math.min(
					math.floor(elapsed / messageChangeInterval) + 1,
					#messages
				)
				statusLabel.Text = messages[messageIndex]
			end

			if progress >= 1 then
				break
			end

			task.wait(updateInterval)
		end

		if statusLabel then
			statusLabel.Text = "Complete"
		end


		StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.All, true)
		humanoid.PlatformStand = false
		camera.CameraType = originalCameraType
	end

	countUp()

end;
task.spawn(C_c);

return G2L["1"], require;
